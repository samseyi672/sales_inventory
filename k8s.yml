apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: api-gateway
      name: api-gateway
    spec:
      ports:
        - name: "7073"
          port: 7073
          targetPort: 7073
        - name: "8181"
          port: 8181
          targetPort: 8181
      selector:
        io.kompose.service: api-gateway
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: discovery-server
      name: discovery-server
    spec:
      ports:
        - name: "8761"
          port: 8761
          targetPort: 8761
      selector:
        io.kompose.service: discovery-server
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: kafka
      name: kafka
    spec:
      ports:
        - name: "9092"
          port: 9092
          targetPort: 9092
      selector:
        io.kompose.service: kafka
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: mysqldb
      name: mysqldb
    spec:
      ports:
        - name: "3308"
          port: 3308
          targetPort: 3306
      selector:
        io.kompose.service: mysqldb
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus
      name: prometheus
    spec:
      ports:
        - name: "9090"
          port: 9090
          targetPort: 9090
      selector:
        io.kompose.service: prometheus
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: report-service
      name: report-service
    spec:
      ports:
        - name: "7074"
          port: 7074
          targetPort: 7074
      selector:
        io.kompose.service: report-service
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: sales-service
      name: sales-service
    spec:
      ports:
        - name: "7076"
          port: 7076
          targetPort: 7076
      selector:
        io.kompose.service: sales-service
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: zipkin
      name: zipkin
    spec:
      ports:
        - name: "9411"
          port: 9411
          targetPort: 9411
      selector:
        io.kompose.service: zipkin
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: zookeeper
      name: zookeeper
    spec:
      ports:
        - name: "2181"
          port: 2181
          targetPort: 2181
      selector:
        io.kompose.service: zookeeper
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: api-gateway
      name: api-gateway
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: api-gateway
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: api-gateway
        spec:
          containers:
            - env:
                - name: LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY
                  value: ' TRACE'
                - name: SPRING_PROFILES_ACTIVE
                  value: docker
              image: api-gateway
              name: api-gateway
              ports:
                - containerPort: 7073
                - containerPort: 8181
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: digitalis
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/digitalis: "true"
      podSelector:
        matchLabels:
          io.kompose.network/digitalis: "true"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: discovery-server
      name: discovery-server
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: discovery-server
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: discovery-server
        spec:
          containers:
            - env:
                - name: SPRING_PROFILES_ACTIVE
                  value: docker
              image: discovery-server
              name: discovery-server
              ports:
                - containerPort: 8761
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: kafka
      name: kafka
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: kafka
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: kafka
        spec:
          containers:
            - env:
                - name: ALLOW_PLAINTEXT_LISTENER
                  value: "yes"
                - name: KAFKA_CFG_ADVERTISED_LISTENERS
                  value: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://127.0.0.1:9092
                - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
                  value: "true"
                - name: KAFKA_CFG_BROKER_ID
                  value: "1"
                - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
                  value: DOCKER_INTERNAL
                - name: KAFKA_CFG_LISTENERS
                  value: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
                - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
                  value: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
                - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
                  value: "1"
                - name: KAFKA_CFG_ZOOKEEPER_CONNECT
                  value: zookeeper:2181
                - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
                  value: "100"
                - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
                  value: "1"
                - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
                  value: "1"
              image: docker.io/bitnami/kafka:3
              name: kafka
              ports:
                - containerPort: 9092
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: mysqldb
      name: mysqldb
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: mysqldb
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: mysqldb
        spec:
          containers:
            - env:
                - name: MYSQL_DATABASE
                  value: jetstoredb
                - name: MYSQL_PASSWORD
                  value: root
                - name: MYSQL_ROOT_PASSWORD
                  value: root
              image: mysql:8.0
              name: mysqldb
              ports:
                - containerPort: 3306
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/mysql
                  name: mysqldb-claim0
          restartPolicy: Always
          volumes:
            - name: mysqldb-claim0
              persistentVolumeClaim:
                claimName: mysqldb-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: mysqldb-claim0
      name: mysqldb-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus
      name: prometheus
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: prometheus
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: prometheus
        spec:
          containers:
            - image: prom/prometheus:v2.37.1
              name: prometheus
              ports:
                - containerPort: 9090
              resources: {}
              volumeMounts:
                - mountPath: /etc/prometheus/prometheus.yml
                  name: prometheus-claim0
          restartPolicy: Always
          volumes:
            - name: prometheus-claim0
              persistentVolumeClaim:
                claimName: prometheus-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus-claim0
      name: prometheus-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: report-service
      name: report-service
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: report-service
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: report-service
        spec:
          containers:
            - env:
                - name: SPRING_APPLICATION_JSON
                  value: '{ "initialization-mode": "always", "spring.datasource.driver-class-name": "com.mysql.cj.jdbc.Driver", "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect", "spring.jpa.hibernate.ddl-auto" : "create" }'
                - name: SPRING_DATASOURCE_PASSWORD
                  value: root
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://mysqldb:3306/mintydb?createDatabaseIfNotExists=true&autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
                - name: SPRING_DATASOURCE_USERNAME
                  value: root
                - name: SPRING_PROFILES_ACTIVE
                  value: docker
              image: report-service
              name: report-service
              ports:
                - containerPort: 7074
              resources: {}
              volumeMounts:
                - mountPath: /fileandimages
                  name: report-service-claim0
          restartPolicy: Always
          volumes:
            - name: report-service-claim0
              persistentVolumeClaim:
                claimName: report-service-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: report-service-claim0
      name: report-service-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: sales-service
      name: sales-service
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: sales-service
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: sales-service
        spec:
          containers:
            - env:
                - name: SPRING_APPLICATION_JSON
                  value: '{ "initialization-mode": "always", "spring.datasource.driver-class-name": "com.mysql.cj.jdbc.Driver", "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect", "spring.jpa.hibernate.ddl-auto" : "update" }'
                - name: SPRING_DATASOURCE_PASSWORD
                  value: root
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://mysqldb:3306/mintydb?createDatabaseIfNotExists=true&autoReconnect=true&allowPublicKeyRetrieval=true&useSSL=false
                - name: SPRING_DATASOURCE_USERNAME
                  value: root
                - name: SPRING_PROFILES_ACTIVE
                  value: docker
              image: sales-service
              name: sales-service
              ports:
                - containerPort: 7076
              resources: {}
              volumeMounts:
                - mountPath: /fileandimages
                  name: sales-service-claim0
          restartPolicy: Always
          volumes:
            - name: sales-service-claim0
              persistentVolumeClaim:
                claimName: sales-service-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: sales-service-claim0
      name: sales-service-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: zipkin
      name: zipkin
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: zipkin
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: zipkin
        spec:
          containers:
            - image: openzipkin/zipkin
              name: zipkin
              ports:
                - containerPort: 9411
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
        kompose.version: 1.27.0 (b0ed6a2c9)
      creationTimestamp: null
      labels:
        io.kompose.service: zookeeper
      name: zookeeper
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: zookeeper
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: C:\kompose\kompose.exe convert --out ./k8s.yml
            kompose.version: 1.27.0 (b0ed6a2c9)
          creationTimestamp: null
          labels:
            io.kompose.network/digitalis: "true"
            io.kompose.service: zookeeper
        spec:
          containers:
            - env:
                - name: ALLOW_ANONYMOUS_LOGIN
                  value: "yes"
              image: docker.io/bitnami/zookeeper:3.8
              name: zookeeper
              ports:
                - containerPort: 2181
              resources: {}
          restartPolicy: Always
    status: {}
kind: List
metadata: {}

